static String ReadFile() throws IOException{
           String  data = new String(Files.readAllBytes(Paths.get("C:\\Users\\Bilal\\Desktop\\test.txt")));
       return data;
    }
   static boolean SpaceBreaker(char ch ){
       if(ch ==' '){
        return true ;       
}else return false;
    } 
   static boolean PunctuatorBreaker(char ch){
 String [] punctuators={";",",","{","}","(",")","[","]"};
     for(int i =0 ;i<punctuators.length; i ++ ){
         if(punctuators[i].equals(String.valueOf(ch)))
        return true;
     }
     return false;}

      static boolean OperatorBreaker(char ch){
       String [] operators={"*","/","%","&&","||",">","<"};

     for(int i =0 ;i<operators.length; i ++ ){
         if(operators[i].equals(String.valueOf(ch) ))
             return true;
     }
     return false;
   }
     static boolean linechangebreaker(char ch ){

       if(ch == '\r'){

        return true ;       
}else return false;
    }
      static boolean linechangebreaker1(char ch ){

       if(ch == '\n'){

        return true ;       
}else return false;
    }
            static boolean CommentBreaker(char ch){
       String  comment="//";
       String comment1="/";
if(comment1==(String.valueOf(ch))){
      if(comment==(String.valueOf(ch))){
             return true;

         }    }

     return false;
   }
             static boolean IsDigit(String ch){

       String [] digits={"0","1","2","3","4","5","6","7","8","9"};
 for(int j=0;j<ch.length();j++){

     for(int i =0 ;i<digits.length; i ++ ){
         if(digits[i].equals(String.valueOf(ch) ))
             return true;
     }}
     return false;
   }    
    

 
  
 
    public static void main(String[] args) throws IOException {
     ArrayList <String> allChars = new ArrayList();
      String fileInput = ReadFile();
      String temp = "";

      for(int i =0;i<fileInput.length();i++){

           if( CommentBreaker(fileInput.charAt(i)) == true)
               {
                while(fileInput.charAt(i)!='\r'){
                    i++;
                }}

           else if( SpaceBreaker(fileInput.charAt(i)) == true){  
                if(temp.length()!=0){
                    allChars.add(temp);
                    temp="";
             }}
           else if(OperatorBreaker(fileInput.charAt(i))==true){
        if(temp.length()==0)
      allChars.add(String.valueOf(fileInput.charAt(i)));
        else{ 
            allChars.add(temp);
                    temp="";
                    allChars.add(String.valueOf(fileInput.charAt(i)));

                  }}

   else if(PunctuatorBreaker(fileInput.charAt(i))==true){
        if(temp.length()==0)
      allChars.add(String.valueOf(fileInput.charAt(i)));
        else{
            allChars.add(temp);
                    temp="";
                    allChars.add(String.valueOf(fileInput.charAt(i)));
                  }}
     else if(linechangebreaker(fileInput.charAt(i))==true)
      {
              if(temp.length()!=0){

                    allChars.add(temp);
                    temp="";
    i++;
                    allChars.add(String.valueOf(fileInput.charAt(i)));

                  }
              else{

                    i++;
                    allChars.add(String.valueOf(fileInput.charAt(i)));
              }
      }
     else if(linechangebreaker1(fileInput.charAt(i))==true)
      {
              if(temp.length()!=0){

                    allChars.add(temp);
                    temp="";

                 allChars.add(String.valueOf(fileInput.charAt(i)));

                  }else{
              allChars.add(String.valueOf(fileInput.charAt(i)));
              }
      }


   else if(fileInput.charAt(i)=='.'){
                   if(temp.length()==0){
                    allChars.add(String.valueOf(fileInput.charAt(i)));
                      }
                    String regex = "[0-9]+";
                  if(temp.matches(regex)){//temphas numbers
                temp+= fileInput.charAt(i);
                    }
                  else{
                   allChars.add(temp);
                    temp="";
                    temp+=(String.valueOf(fileInput.charAt(i)));
                  }}


   else if(fileInput.charAt(i)=='\\'){
       while(fileInput.charAt(i)!='\n'){
         i++;  
   }}
    else if(fileInput.charAt(i)=='#'){
        if(temp=="this"||temp=="super"){
         temp+=(String.valueOf(fileInput.charAt(i)));
 allChars.add(temp);
         temp="";
    }
        else{
                 allChars.add(temp);
               temp="";
                allChars.add(String.valueOf(fileInput.charAt(i)));           
        }


    }
  else if(fileInput.charAt(i)=='"'){
       allChars.add(temp);
       temp="";
       temp+=(String.valueOf(fileInput.charAt(i)));
       i++;
       while(fileInput.charAt(i)!='"'){
           if(fileInput.charAt(i)=='\r')
           {allChars.add(temp);
       temp="";
       //i++;
           }else
           {  temp+=(String.valueOf(fileInput.charAt(i)));
           i++;
           }}
       temp+=(String.valueOf(fileInput.charAt(i)));
       allChars.add(temp);
       temp="";
  }
   else if(fileInput.charAt(i)=='+'){
            allChars.add(temp);
                    temp="";               
     temp+=(String.valueOf(fileInput.charAt(i)));
       i++;
       if(fileInput.charAt(i)=='+'){
       temp+=(String.valueOf(fileInput.charAt(i)));
       allChars.add(temp);
       temp="";
       }else{
    allChars.add(temp);
       temp="";
       i--;     
  }}
    else if(fileInput.charAt(i)=='-'){
            allChars.add(temp);
                    temp="";               
     temp+=(String.valueOf(fileInput.charAt(i)));
       i++;
       if(fileInput.charAt(i)=='-'){
       temp+=(String.valueOf(fileInput.charAt(i)));
       allChars.add(temp);
       temp="";
       }else{
    allChars.add(temp);
       temp="";
       i--;     
  }}
    else if(fileInput.charAt(i)=='!'){
            allChars.add(temp);
                    temp="";               
     temp+=(String.valueOf(fileInput.charAt(i)));
       i++;
       if(fileInput.charAt(i)=='='){
       temp+=(String.valueOf(fileInput.charAt(i)));
       allChars.add(temp);
       temp="";
       }else{
    allChars.add(temp);
       temp="";
       i--;     
  }}
    else if(fileInput.charAt(i)=='='){
            allChars.add(temp);
                    temp="";               
     temp+=(String.valueOf(fileInput.charAt(i)));
       i++;
       if(fileInput.charAt(i)=='='){
       temp+=(String.valueOf(fileInput.charAt(i)));
       allChars.add(temp);
       temp="";
       }else{
    allChars.add(temp);
       temp="";
       i--;     
  }}
   else {

            temp+=fileInput.charAt(i);
            }}
            for(String x : allChars){
//                if(x =='\r')
//                    x++;
      System.out.println(x);
      }
        LexicalAnalyzer input = new LexicalAnalyzer(allChars);    
        input.GenerateToken();
        Syntax a = new Syntax();
        a.parser();


      }
private static boolean isNumeric(String temp) {
    try {  
String someString = temp;
boolean isNumeric = someString.chars().allMatch( Character::isDigit );
        Integer.parseInt(temp);  
    return true;
  }
    catch(NumberFormatException e){  
    return false;  
 }
       